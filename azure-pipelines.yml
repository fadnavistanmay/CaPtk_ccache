trigger:
  batch: true
  branches:
    include:
    - master

jobs:
- job: 'WindowsBuild'
  displayName: "End-to-end Windows build & package"
  timeoutInMinutes: 0
  cancelTimeoutInMinutes: 300
  condition: not(true)

  pool:
    vmImage: 'vs2017-win2016'

  steps:
    - script: |
        choco install doxygen.install git-lfs.install
        git lfs install
      displayName: 'Install dependencies'
  
    # Pull LFS
    - bash: |
        export GIT_LFS_SKIP_SMUDGE=1
        git lfs pull --include "binaries/precompiledApps/windows.zip"
        git lfs pull --include "binaries/qt_5.12.1/windows.zip"
        #echo "Not doing this until quota is improved on GitHub"
      displayName: 'Pull LFS'

    # Testing LFS
    - bash: |
        ls -lt binaries/qt_5.12.1/
        ls -lt binaries/precompiledApps/
      displayName: 'Testing LFS pull'

    #- bash: |
    #    rm -rf binaries/*mac*.zip
    #    rm -rf binaries/*linux*.zip
    #    rm -rf history
    #    rm -rf src/applications/individualApps/libra/MCRInstaller.zip
    #  displayName: 'Take the nuclear option'

    # Moving LFS Files
    - bash: |
        mkdir bin
        cd bin
        mv ../binaries/precompiledApps/windows.zip ./binaries_windows.zip
        mv ../binaries/qt_5.12.1/windows.zip ./qt.zip
        ls -lt
      displayName: 'Moving LFS files to the appropriate location under bin'

    - script: |
        cd bin
        call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
        cmake -DCMAKE_GENERATOR_PLATFORM=x64 -DCMAKE_INSTALL_PREFIX="./installLibs" ..
        setx PATH "%PATH%;$(Build.SourcesDirectory)/bin/qt/5.12.1/bin"
        cmake --build . --target ALL_BUILD --config Release
      displayName: 'Configure and compile Superbuild'
    
    - script: |
        cd bin
        call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
        cmake -DCMAKE_GENERATOR_PLATFORM=x64 -DCMAKE_INSTALL_PREFIX="./install" -DCAPTK_DISABLE_CWL=ON ..
        setx PATH "%PATH%;$(Build.SourcesDirectory)/bin/qt/5.12.1/bin"
        cmake --build . --target ALL_BUILD --config Release
      displayName: 'Configure and compile CaPTk'
    
    #- script: |
    #    cd bin
    #    export GIT_LFS_SKIP_SMUDGE=1
    #    git lfs pull --include "data/TestData.zip"
    #    call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
    #    cmake -DCMAKE_GENERATOR_PLATFORM=x64 -DCMAKE_INSTALL_PREFIX="./install" -DCAPTK_DISABLE_CWL=ON ..
    #    setx PATH "%PATH%;$(Build.SourcesDirectory)/bin/qt/5.12.1/bin"
    #    cmake --build . --target RUN_TESTS --config Release
    #  displayName: 'Performing the Tests'
    
    #- script: |
    #    cd bin
    #    call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
    #    cmake -DCMAKE_GENERATOR_PLATFORM=x64 -DCMAKE_INSTALL_PREFIX="./install" ..
    #    cmake --build . --target PACKAGE --config Release
    #
    #    mv CaPTk_*_Installer.exe $(Build.ArtifactStagingDirectory)
    #    
    #    cd ../
    #    rm -rf *
    #    
    #  displayName: 'Package CaPTk'
    #
    #- script: | 
    #    cd bin
    #    #call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
    #    echo "Deleting folders to make space"
    #    rm -rf qt
    #    rm -rf externalApps
    #    rm -rf binaries_windows.zip
    #    rm -rf ../src
    #    mv CaPTk_*_Installer.exe ../
    #    
    #  displayName: 'Moving Installer one level up'
    #
    #- task: PublishBuildArtifacts@1
    #  inputs:
    #    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    #    artifactName: '$(Build.DefinitionName)_installer_windows'
    #
    #- task: DownloadBuildArtifacts@0
    #  inputs:
    #    buildType: 'current'
    #    downloadType: 'single'
    #    artifactName: '$(Build.DefinitionName)_installer_windows'
    #    downloadPath: '$(System.ArtifactsDirectory)'

- job: 'XenialBuild'
  displayName: "End-to-end Linux (Xenial) build"
  timeoutInMinutes: 0
  cancelTimeoutInMinutes: 300

  pool:
    vmImage: 'Ubuntu-16.04'

  variables:
    CCACHE_DIR: $(Pipeline.Workspace)/ccache

  steps:
    - checkout: self
      persistCredentials: 'true'

    # Dependency manager
    - bash: |
        sudo apt-get update && sudo apt-get install -qq gcc-4.8 g++-4.8 make libgl-dev cmake python3-pip python-numpy dos2unix libxkbcommon-x11-0 doxygen
        curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
        sudo apt-get install git-lfs
        git lfs install
      displayName: 'Install dependencies from Aptitude'

    - bash: |
        sudo apt-get install ccache -y    
        echo "##vso[task.prependpath]/usr/lib/ccache"
      displayName: Install ccache

    # Pull LFS
    - bash: |
        export GIT_LFS_SKIP_SMUDGE=1
        git lfs pull --include "binaries/precompiledApps/linux.zip"
        git lfs pull --include "binaries/qt_5.12.1/linux.zip"
        #echo "Not doing this until quota is improved on GitHub"
      displayName: 'Pull LFS'

    # Testing LFS
    - bash: |
        ls -lt binaries/qt_5.12.1/
        ls -lt binaries/precompiledApps/
      displayName: 'Testing LFS pull'

    # Moving LFS Files
    - bash: |
        mkdir bin
        cd bin
        mv ../binaries/precompiledApps/linux.zip ./binaries_linux.zip
        mv ../binaries/qt_5.12.1/linux.zip ./qt.zip
        ls -lt
      displayName: 'Moving LFS files to the appropriate location under bin'

    - task: CacheBeta@0
      inputs:
        key: "default"
        path: $(CCACHE_DIR)
      displayName: ccache

    # Configure and build superbuild
    - bash: |
        cd bin
        cmake -DCMAKE_INSTALL_PREFIX="./install/appdir/usr" -DQT_DOWNLOAD_FORCE=ON ..
        make -j2
      displayName: 'Configure and compile Superbuild'

    - bash: |
        du -sh $(CCACHE_DIR)
        ccache -s
      displayName: Show ccache size

    # Configure and build CaPTk
    - bash: |
        cd bin
        cmake -DCMAKE_INSTALL_PREFIX="./install/appdir/usr" -DQT_DOWNLOAD_FORCE=ON ..
        make -j2
        #make install/strip
      displayName: 'Configure and compile CaPTk'

    - bash: |
        du -sh $(CCACHE_DIR)
        ccache -s
      displayName: Show ccache size

    # Check qt
    - bash: |
        cd bin
        ls -a
        ls ./qt/
      displayName: 'Check qt'      
      
    # Check libra
    - bash: |
        cd bin/install/appdir/usr/bin/
        ls -l
      displayName: 'Checking ${installDir}/bin'
      
    # Build a package
    - bash: |
        export PATH=`pwd`/bin/qt/5.12.1/bin:$PATH
        export PATH=`pwd`/bin/qt/5.12.1/libexec:$PATH
        export CMAKE_PREFIX_PATH=`pwd`/bin/qt/5.12.1/lib/cmake/Qt5:$CMAKE_PREFIX_PATH
        rm -rf regression
        rm -rf binaries

        #make install

        # export PKG_FAST_MODE=1
        ./scripts/captk-pkg
        ./scripts/captk-pkg

        rm -rf bin
        rm -rf src
        rm -rf docs*

        rm -rf scripts

        mv CaPTk_*_Installer.bin $(Build.ArtifactStagingDirectory)
        
      displayName: 'Set up environment variables for packager and build a package'
      condition: not(true)
    
    #- script: |
    #    cd bin
    #    export GIT_LFS_SKIP_SMUDGE=1
    #    git lfs pull --include "data/TestData.zip"
    #    make tests
    #  displayName: 'Performing the Tests'
    
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: '$(Build.DefinitionName)_installer_Linux'
      condition: not(true)

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: '$(Build.DefinitionName)_installer_Linux'
        downloadPath: '$(System.ArtifactsDirectory)'
      condition: not(true)
    
- job: 'MacOSBuild'
  displayName: "End-to-end MacOS build & package"
  timeoutInMinutes: 0
  cancelTimeoutInMinutes: 300
  condition: not(true)

  pool:
    vmImage: 'MacOS-10.13'

  steps:
    - bash: exit 1

    - bash: |
        brew install make doxygen llvm
        #brew install caskroom/cask/mactex # latex is not used for documentation right now
      displayName: 'Brew dependencies'
    
    - bash: |
        brew install git-lfs
        git lfs install
      displayName: 'Brew dependency install LFS'
    
    # Pull LFS
    - bash: |
        export GIT_LFS_SKIP_SMUDGE=1
        git lfs pull --include "binaries/precompiledApps/macos.zip"
        git lfs pull --include "binaries/qt_5.12.1/macos.zip"
        #echo "Not doing this until quota is improved on GitHub"
      displayName: 'Pull LFS'

    # Testing LFS
    - bash: |
        ls -lt binaries/qt_5.12.1/
        ls -lt binaries/precompiledApps/
      displayName: 'Testing LFS pull'

    # Moving LFS Files
    - bash: |
        mkdir bin
        cd bin
        mv ../binaries/precompiledApps/macos.zip ./binaries_macos.zip
        mv ../binaries/qt_5.12.1/macos.zip ./qt.zip
        ls -lt
      displayName: 'Moving LFS files to the appropriate location under bin'

    #- bash: |
    #    rm -rf binaries/*linux*.zip
    #    rm -rf binaries/*windows*.zip
    #    rm -rf history
    #    rm -rf src/applications/individualApps/libra/MCRInstaller.zip
    #  displayName: 'Take the nuclear option'

    - bash: |
        export CC=""
        export CXX=""
        export LDFLAGS=""
        export CPPFLAGS=""

        export CMAKE_INSTALL_RPATH_USE_LINK_PATH=TRUE
        export CMAKE_PREFIX_PATH="/Library/TeX/texbin"
      displayName: 'Export variables'

    - bash: |
        cd bin

        cmake ../ -DCMAKE_INSTALL_PREFIX="./install"
        cmake ../ -DCMAKE_INSTALL_PREFIX="./install"

        make -j2
      displayName: 'Configure and compile Superbuild'

    - bash: |
        cd bin

        rm CMakeCache.txt

        export CC=/usr/local/opt/llvm/bin/clang
        export CXX=/usr/local/opt/llvm/bin/clang++
        export LDFLAGS="-L/usr/local/opt/llvm/lib"
        export CPPFLAGS="-L/usr/local/opt/llvm/include"

        cmake ../
        cmake ../

        make -j 2
      displayName: 'Export variables for llvm then configure and compile CaPTk'
    
    - bash: |
        cd bin

        version=$(grep -i -e "project_version:*" CMakeCache.txt | cut -c24-)
        pkgname="_Installer"
        pkgname="$version$pkgname"

        sudo rm -rf CaPTk_$version.app/Contents/Resources/bin/ITK-SNAP.app

        rm CMakeCache.txt
        rm -rf CaPTk*.app

        export CC=/usr/local/opt/llvm/bin/clang
        export CXX=/usr/local/opt/llvm/bin/clang++
        export LDFLAGS="-L/usr/local/opt/llvm/lib"
        export CPPFLAGS="-L/usr/local/opt/llvm/include"

        cmake ../
        cmake ../

        make -j 2
        sudo rm -rf CaPTk_$version.app/Contents/Resources/bin/ITK-SNAP.app
        make -j 2
      displayName: 'Ensure documentation is picked up properly'
    
    
    - bash: |
        cd bin 
        
        version=$(grep -i -e "project_version:*" CMakeCache.txt | cut -c24-)
        pkgname="_Installer"
        pkgname="$version$pkgname"

        rm -rf *.pkg 
        rm -rf _CPack*
        make package

        pkgbuild --version $version --identifier com.cbica.captk --install-location /Applications --component ./_CPack_Packages/OSX/DragNDrop/CaPTk_$version/CaPTk_$version.app/  ./CaPTk_$version.pkg

        productbuild --synthesize --package CaPTk_$version.pkg ./distribution.xml

        xml='<?xml version="1.0" encoding="utf-8"?>
        <installer-gui-script minSpecVersion="1">
            <title>CaPTk_'"$version"'</title>
            <license file="Combined.txt"></license>
            <pkg-ref id="com.cbica.captk"/>
            <options customize="never" require-scripts="false"/>
            <choices-outline>
                <line choice="default">
                    <line choice="com.cbica.captk"/>
                </line>
            </choices-outline>
            <choice id="default"/>
            <choice id="com.cbica.captk" visible="false">
                <pkg-ref id="com.cbica.captk"/>
            </choice>
            <pkg-ref id="com.cbica.captk" version="$version" onConclusion="none">CaPTk_'"$version"'.pkg</pkg-ref>
        </installer-gui-script>' 

        echo $xml > "./distribution.xml"

        productbuild --distribution ./distribution.xml --resources ./_CPack_Packages/OSX/DragNDrop/CaPTk_$version/CaPTk_$version.app/Contents/Resources/license/ --package-path . ./CaPTk_$pkgname.pkg
        
        mv *Installer.pkg $(Build.ArtifactStagingDirectory)
        sudo rm -rf *
      displayName: 'Package CaPTk (.dmg and .pkg)'
    
    #- script: |
    #    cd bin
    #    export GIT_LFS_SKIP_SMUDGE=1
    #    git lfs pull --include "data/TestData.zip"
    #    make tests
    #  displayName: 'Performing the Tests'
    
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: '$(Build.DefinitionName)_installer_macOS'

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: '$(Build.DefinitionName)_installer_macOS'
        downloadPath: '$(System.ArtifactsDirectory)'
  
#### SELF-HOSTED AGENTS

# - job: 'XenialSelfHostedBuild'
#   displayName: "End-to-end Linux (Xenial) build"
#   timeoutInMinutes: 0
#   cancelTimeoutInMinutes: 300

#   pool: Default

#   steps:
#     # Pull LFS
#     - bash: |
#         git lfs pull
#       displayName: 'Pull LFS'

#     # Create build dir
#     - bash: |
#         mkdir -p bin
#       displayName: 'Create build directory'

#     # Configure and build superbuild
#     - bash: |
#         cd bin
#         cmake -DCMAKE_INSTALL_PREFIX="./install/appdir/usr" -DQT_DOWNLOAD_FORCE=ON ..
#         make -j2
#       displayName: 'Configure and compile Superbuild'

#     # Configure and build CaPTk
#     - bash: |
#         cd bin
#         cmake -DCMAKE_INSTALL_PREFIX="./install/appdir/usr" -DQT_DOWNLOAD_FORCE=ON ..
#         make -j2
#         make install/strip
#       displayName: 'Configure and compile CaPTk'

#     # Check qt
#     - bash: |
#         cd bin
#         ls -a
#         ls ./qt/
#       displayName: 'Check qt'
      
#     # Check libra
#     - bash: |
#         cd bin/install/appdir/usr/bin/
#         ls -l
#       displayName: 'Checking ${installDir}/bin'
      
#     # Build a package
#     - bash: |
#         export PATH=`pwd`/bin/qt/5.12.1/bin:$PATH
#         export PATH=`pwd`/bin/qt/5.12.1/libexec:$PATH
#         export CMAKE_PREFIX_PATH=`pwd`/bin/qt/5.12.1/lib/cmake/Qt5:$CMAKE_PREFIX_PATH

#         make install

#         ./scripts/captk-pkg

#         rm -rf bin

#         mv CaPTk_*_Installer.bin $(Build.ArtifactStagingDirectory)
        
#       displayName: 'Set up environment variables for packager and build a package'

#     - task: PublishBuildArtifacts@1
#       inputs:
#         pathtoPublish: '$(Build.ArtifactStagingDirectory)'
#         artifactName: '$(Build.DefinitionName)_installer_Linux_selfhosted'

#     - task: DownloadBuildArtifacts@0
#       inputs:
#         buildType: 'current'
#         downloadType: 'single'
#         artifactName: '$(Build.DefinitionName)_installer_Linux_selfhosted'
#         downloadPath: '$(System.ArtifactsDirectory)'


# - job: 'MacOSSelfHostBuild'
#   displayName: "Self-hosted MacOS agent"
#   timeoutInMinutes: 0
#   cancelTimeoutInMinutes: 300

#   pool: Default

#   steps:

#     - bash: |
#         export CC=""
#         export CXX=""
#         export LDFLAGS=""
#         export CPPFLAGS=""

#         git lfs install && git lfs pull --all

#         export CMAKE_INSTALL_RPATH_USE_LINK_PATH=TRUE
#         export CMAKE_PREFIX_PATH="/Library/TeX/texbin"
#       displayName: 'Export variables'

#     - bash: |
#         mkdir bin
#       displayName: 'Create build directory'
  
#     - bash: |
#         cd bin

#         cmake ../ -DCMAKE_INSTALL_PREFIX="./install"
#         cmake ../ -DCMAKE_INSTALL_PREFIX="./install"

#         make -j2
#       displayName: 'Configure and compile Superbuild'

#     - bash: |
#         cd bin

#         rm CMakeCache.txt

#         export CC=/usr/local/opt/llvm/bin/clang
#         export CXX=/usr/local/opt/llvm/bin/clang++
#         export LDFLAGS="-L/usr/local/opt/llvm/lib"
#         export CPPFLAGS="-L/usr/local/opt/llvm/include"

#         cmake ../
#         cmake ../

#         make 
#       displayName: 'Export variables for llvm then configure and compile CaPTk'
  
#     - bash: |
#         cd bin

#         rm CMakeCache.txt
#         rm -rf CaPTk*.app

#         export CC=/usr/local/opt/llvm/bin/clang
#         export CXX=/usr/local/opt/llvm/bin/clang++
#         export LDFLAGS="-L/usr/local/opt/llvm/lib"
#         export CPPFLAGS="-L/usr/local/opt/llvm/include"

#         cmake ../
#         cmake ../

#         make 
#       displayName: 'Ensure documentations are picked up properly'
  
  
#     - bash: |
#         cd bin 
      
#         make package

#         version=$(grep -i -e "project_version:*" CMakeCache.txt | cut -c24-)
#         pkgname="_Installer"
#         pkgname="$version$pkgname"

#         pkgbuild --version $version --identifier com.cbica.captk --install-location /Applications --component ./_CPack_Packages/OSX/DragNDrop/CaPTk_$version/CaPTk_$version.app/  ./CaPTk_$version.pkg

#         productbuild --synthesize --package CaPTk_$version.pkg ./distribution.xml

#         xml='<?xml version="1.0" encoding="utf-8"?>
#         <installer-gui-script minSpecVersion="1">
#             <title>CaPTk_'"$version"'</title>
#             <license file="Combined.txt"></license>
#             <pkg-ref id="com.cbica.captk"/>
#             <options customize="never" require-scripts="false"/>
#             <choices-outline>
#                 <line choice="default">
#                     <line choice="com.cbica.captk"/>
#                 </line>
#             </choices-outline>
#           <choice id="default"/>
#             <choice id="com.cbica.captk" visible="false">
#                 <pkg-ref id="com.cbica.captk"/>
#             </choice>
#             <pkg-ref id="com.cbica.captk" version="$version" onConclusion="none">CaPTk_'"$version"'.pkg</pkg-ref>
#         </installer-gui-script>' 

#         echo $xml > "./distribution.xml"

#         productbuild --distribution ./distribution.xml --resources ./_CPack_Packages/OSX/DragNDrop/CaPTk_$version/CaPTk_$version.app/Contents/Resources/license/ --package-path . ./CaPTk_$pkgname.pkg
      
#         mv *Installer.pkg $(Build.ArtifactStagingDirectory)
#         rm -rf *
#       displayName: 'Package CaPTk (.dmg and .pkg)'

#     - task: PublishBuildArtifacts@1
#       inputs:
#         pathtoPublish: '$(Build.ArtifactStagingDirectory)'
#         artifactName: '$(Build.DefinitionName)_installer_macOS_selfhosted'

#     - task: DownloadBuildArtifacts@0
#       inputs:
#         buildType: 'current'
#         downloadType: 'single'
#         artifactName: '$(Build.DefinitionName)_installer_macOS_selfhosted'
#         downloadPath: '$(System.ArtifactsDirectory)'